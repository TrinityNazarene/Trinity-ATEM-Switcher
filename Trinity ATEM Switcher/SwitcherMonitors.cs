/* -LICENSE-START-
** Copyright (c) 2011 Blackmagic Design
**
** Permission is hereby granted, free of charge, to any person or organization
** obtaining a copy of the software and accompanying documentation covered by
** this license (the "Software") to use, reproduce, display, distribute,
** execute, and transmit the Software, and to prepare derivative works of the
** Software, and to permit third-parties to whom the Software is furnished to
** do so, all subject to the following:
** 
** The copyright notices in the Software and this entire statement, including
** the above license grant, this restriction and the following disclaimer,
** must be included in all copies of the Software, in whole or in part, and
** all derivative works of the Software, unless such copies or derivative
** works are solely in the form of machine-executable object code generated by
** a source language processor.
** 
** THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
** IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
** FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
** SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
** FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
** ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
** DEALINGS IN THE SOFTWARE.
** -LICENSE-END-
*/

using System;
using System.Text;

using BMDSwitcherAPI;

namespace Trinity_ATEM_Switcher
{
    public delegate void SwitcherEventHandler(object sender, object args);
    class AudioMixerMonitorOutputMonitor : IBMDSwitcherAudioMonitorOutputCallback
    {
        //Events:
        public event SwitcherEventHandler LevelNotificationChanged;
        public event SwitcherEventHandler DimChanged;
        public event SwitcherEventHandler DimLevelChanged;
        public event SwitcherEventHandler GainChanged;
        public event SwitcherEventHandler MonitorEnableChanged;
        public event SwitcherEventHandler MuteChanged;
        public event SwitcherEventHandler SoloChanged;
        public event SwitcherEventHandler SoloInputChanged;

        public AudioMixerMonitorOutputMonitor()
        {
        }

        void IBMDSwitcherAudioMonitorOutputCallback.LevelNotification(double Left, double Right, double PeakLeft, double PeakRight)
        {
            if (LevelNotificationChanged != null)
                LevelNotificationChanged(this, null);
        }

        void IBMDSwitcherAudioMonitorOutputCallback.Notify(_BMDSwitcherAudioMonitorOutputEventType EventType)
        {
            switch (EventType)
            {
                case (_BMDSwitcherAudioMonitorOutputEventType.bmdSwitcherAudioMonitorOutputEventTypeDimChanged):
                    if (DimChanged != null)
                        DimChanged(this, null);
                    break;

                case (_BMDSwitcherAudioMonitorOutputEventType.bmdSwitcherAudioMonitorOutputEventTypeDimLevelChanged):
                    if (DimLevelChanged != null)
                        DimLevelChanged(this, null);
                    break;

                case (_BMDSwitcherAudioMonitorOutputEventType.bmdSwitcherAudioMonitorOutputEventTypeGainChanged):
                    if (GainChanged != null)
                        GainChanged(this, null);
                    break;

                case (_BMDSwitcherAudioMonitorOutputEventType.bmdSwitcherAudioMonitorOutputEventTypeMonitorEnableChanged):
                    if (MonitorEnableChanged != null)
                        MonitorEnableChanged(this, null);
                    break;

                case (_BMDSwitcherAudioMonitorOutputEventType.bmdSwitcherAudioMonitorOutputEventTypeMuteChanged):
                    if (MuteChanged != null)
                        MuteChanged(this, null);
                    break;

                case (_BMDSwitcherAudioMonitorOutputEventType.bmdSwitcherAudioMonitorOutputEventTypeSoloChanged):
                    if (SoloChanged != null)
                        SoloChanged(this, null);
                    break;

                case (_BMDSwitcherAudioMonitorOutputEventType.bmdSwitcherAudioMonitorOutputEventTypeSoloInputChanged):
                    if (SoloInputChanged != null)
                        SoloInputChanged(this, null);
                    break;
            }
        }
    }

    class AudioMixerMonitor : IBMDSwitcherAudioMixerCallback
    {
        //Events:
        public event SwitcherEventHandler ProgramOutLevelNotificationChanged;
        public event SwitcherEventHandler ProgramOutBalanceChanged;
        public event SwitcherEventHandler ProgramOutGainChanged;

        public AudioMixerMonitor()
        {
        }

        void IBMDSwitcherAudioMixerCallback.Notify(_BMDSwitcherAudioMixerEventType EventType)
        {
            switch (EventType)
            {
                case (_BMDSwitcherAudioMixerEventType.bmdSwitcherAudioMixerEventTypeProgramOutBalanceChanged):
                    if (ProgramOutBalanceChanged != null)
                        ProgramOutBalanceChanged(this, null);
                    break;

                case (_BMDSwitcherAudioMixerEventType.bmdSwitcherAudioMixerEventTypeProgramOutGainChanged):
                    if (ProgramOutGainChanged != null)
                        ProgramOutGainChanged(this, null);
                    break;
            }
        }

        void IBMDSwitcherAudioMixerCallback.ProgramOutLevelNotification(double Left, double Right, double PeakLeft, double PeakRight)
        {
            if (ProgramOutLevelNotificationChanged != null)
                ProgramOutLevelNotificationChanged(this, null);
        }
    }

    class AudioInputMonitor : IBMDSwitcherAudioInputCallback
    {
        //Events:
        public event SwitcherEventHandler LevelNotificationChanged;
        public event SwitcherEventHandler BalanceChanged;
        public event SwitcherEventHandler GainChanged;
        public event SwitcherEventHandler IsMixedInChanged;
        public event SwitcherEventHandler MixOptionChanged;

        public AudioInputMonitor()
        {
        }

        void IBMDSwitcherAudioInputCallback.LevelNotification(double Left, double Right, double PeakLeft, double PeakRight)
        {
            if (LevelNotificationChanged != null)
                LevelNotificationChanged(this, null);
        }

        void IBMDSwitcherAudioInputCallback.Notify(_BMDSwitcherAudioInputEventType audioType)
        {
            switch (audioType)
            {
                case (_BMDSwitcherAudioInputEventType.bmdSwitcherAudioInputEventTypeBalanceChanged):
                    if (BalanceChanged != null)
                        BalanceChanged(this, null);
                    break;

                case (_BMDSwitcherAudioInputEventType.bmdSwitcherAudioInputEventTypeGainChanged):
                    if (GainChanged != null)
                        GainChanged(this, null);
                    break;

                case (_BMDSwitcherAudioInputEventType.bmdSwitcherAudioInputEventTypeIsMixedInChanged):
                    if (IsMixedInChanged != null)
                        IsMixedInChanged(this, null);
                    break;

                case (_BMDSwitcherAudioInputEventType.bmdSwitcherAudioInputEventTypeMixOptionChanged):
                    if (MixOptionChanged != null)
                        MixOptionChanged(this, null);
                    break;
            }
        }
    }


    class SwitcherMonitor : IBMDSwitcherCallback
    {
        // Events:
        public event SwitcherEventHandler SwitcherDisconnected;

        public SwitcherMonitor()
        {
        }

        void IBMDSwitcherCallback.Notify(_BMDSwitcherEventType eventType, _BMDSwitcherVideoMode coreVideoMode)
        {
            if (eventType == _BMDSwitcherEventType.bmdSwitcherEventTypeDisconnected)
            {
                if (SwitcherDisconnected != null)
                    SwitcherDisconnected(this, null);
            }
        }
    }

    class MixEffectBlockMonitor : IBMDSwitcherMixEffectBlockCallback
    {
        // Events:
        public event SwitcherEventHandler ProgramInputChanged;
        public event SwitcherEventHandler PreviewInputChanged;
        public event SwitcherEventHandler TransitionFramesRemainingChanged;
        public event SwitcherEventHandler TransitionPositionChanged;
        public event SwitcherEventHandler InTransitionChanged;

        public MixEffectBlockMonitor()
        {
        }

        void IBMDSwitcherMixEffectBlockCallback.PropertyChanged(_BMDSwitcherMixEffectBlockPropertyId propId)
        {
            switch (propId)
            {
                case _BMDSwitcherMixEffectBlockPropertyId.bmdSwitcherMixEffectBlockPropertyIdProgramInput:
                    if (ProgramInputChanged != null)
                        ProgramInputChanged(this, null);
                    break;
                case _BMDSwitcherMixEffectBlockPropertyId.bmdSwitcherMixEffectBlockPropertyIdPreviewInput:
                    if (PreviewInputChanged != null)
                        PreviewInputChanged(this, null);
                    break;
                case _BMDSwitcherMixEffectBlockPropertyId.bmdSwitcherMixEffectBlockPropertyIdTransitionFramesRemaining:
                    if (TransitionFramesRemainingChanged != null)
                        TransitionFramesRemainingChanged(this, null);
                    break;
                case _BMDSwitcherMixEffectBlockPropertyId.bmdSwitcherMixEffectBlockPropertyIdTransitionPosition:
                    if (TransitionPositionChanged != null)
                        TransitionPositionChanged(this, null);
                    break;
                case _BMDSwitcherMixEffectBlockPropertyId.bmdSwitcherMixEffectBlockPropertyIdInTransition:
                    if (InTransitionChanged != null)
                        InTransitionChanged(this, null);
                    break;
            }
        }

    }

    class InputMonitor : IBMDSwitcherInputCallback
    {
        // Events:
        public event SwitcherEventHandler LongNameChanged;

        private IBMDSwitcherInput m_input;
        public IBMDSwitcherInput Input { get { return m_input; } }

        public InputMonitor(IBMDSwitcherInput input)
        {
            m_input = input;
        }

        void IBMDSwitcherInputCallback.Notify(_BMDSwitcherInputEventType eventType)
        {
            switch (eventType)
            {
                case _BMDSwitcherInputEventType.bmdSwitcherInputEventTypeLongNameChanged:
                    if (LongNameChanged != null)
                        LongNameChanged(this, null);
                    break;
            }
        }
    }

    class AuxMonitor : IBMDSwitcherInputAuxCallback
    {
        public event SwitcherEventHandler AuxSourceChanged;

        private int m_aux_number;
        public int AuxNumber { get { return m_aux_number; } }

        public AuxMonitor(int aux_number)
        {
            m_aux_number = aux_number;
        }

        void IBMDSwitcherInputAuxCallback.Notify(_BMDSwitcherInputAuxEventType eventType)
        {
            switch (eventType)
            {
                case _BMDSwitcherInputAuxEventType.bmdSwitcherInputAuxEventTypeInputSourceChanged:
                    if (AuxSourceChanged != null)
                        AuxSourceChanged(this, null);
                    break;
            }
        }
    }

    class KeyMonitor : IBMDSwitcherKeyCallback
    {
        public event SwitcherEventHandler CanBeDVEKeyChanged;
        public event SwitcherEventHandler InputCutChanged;
        public event SwitcherEventHandler InputFillChanged;
        public event SwitcherEventHandler MaskBottomChanged;
        public event SwitcherEventHandler MaskedChanged;
        public event SwitcherEventHandler MaskLeftChanged;
        public event SwitcherEventHandler MaskRightChanged;
        public event SwitcherEventHandler MaskTopChanged;
        public event SwitcherEventHandler OnAirChanged;
        public event SwitcherEventHandler TypeChanged;

        public KeyMonitor()
        {
        }

        void IBMDSwitcherKeyCallback.Notify(_BMDSwitcherKeyEventType EventType)
        {
            switch (EventType)
            {
                case (_BMDSwitcherKeyEventType.bmdSwitcherKeyEventTypeCanBeDVEKeyChanged):
                    if (CanBeDVEKeyChanged != null)
                        CanBeDVEKeyChanged(this, null);
                    break;

                case (_BMDSwitcherKeyEventType.bmdSwitcherKeyEventTypeInputCutChanged):
                    if (InputCutChanged != null)
                        InputCutChanged(this, null);
                    break;

                case (_BMDSwitcherKeyEventType.bmdSwitcherKeyEventTypeInputFillChanged):
                    if (InputFillChanged != null)
                        InputFillChanged(this, null);
                    break;

                case (_BMDSwitcherKeyEventType.bmdSwitcherKeyEventTypeMaskBottomChanged):
                    if (MaskBottomChanged != null)
                        MaskBottomChanged(this, null);
                    break;

                case (_BMDSwitcherKeyEventType.bmdSwitcherKeyEventTypeMaskedChanged):
                    if (MaskedChanged != null)
                        MaskedChanged(this, null);
                    break;

                case (_BMDSwitcherKeyEventType.bmdSwitcherKeyEventTypeMaskLeftChanged):
                    if (MaskLeftChanged != null)
                        MaskLeftChanged(this, null);
                    break;

                case (_BMDSwitcherKeyEventType.bmdSwitcherKeyEventTypeMaskRightChanged):
                    if (MaskRightChanged != null)
                        MaskRightChanged(this, null);
                    break;

                case (_BMDSwitcherKeyEventType.bmdSwitcherKeyEventTypeMaskTopChanged):
                    if (MaskTopChanged != null)
                        MaskTopChanged(this, null);
                    break;

                case (_BMDSwitcherKeyEventType.bmdSwitcherKeyEventTypeOnAirChanged):
                    if (OnAirChanged != null)
                        OnAirChanged(this, null);
                    break;

                case (_BMDSwitcherKeyEventType.bmdSwitcherKeyEventTypeTypeChanged):
                    if (TypeChanged != null)
                        TypeChanged(this, null);
                    break;
            }
        }
    }

    class TransitionMonitor : IBMDSwitcherTransitionParametersCallback
    {
        public event SwitcherEventHandler NextTransitionSelectionChanged;
        public event SwitcherEventHandler NextTransitionStyleChanged;
        public event SwitcherEventHandler TransitionSelectionChanged;
        public event SwitcherEventHandler TransitionStyleChanged;

        public TransitionMonitor()
        {
        }

        void IBMDSwitcherTransitionParametersCallback.Notify(_BMDSwitcherTransitionParametersEventType EventType)
        {
            switch (EventType)
            {
                case (_BMDSwitcherTransitionParametersEventType.bmdSwitcherTransitionParametersEventTypeNextTransitionSelectionChanged):
                    if (NextTransitionSelectionChanged != null)
                        NextTransitionSelectionChanged(this, null);
                    break;

                case (_BMDSwitcherTransitionParametersEventType.bmdSwitcherTransitionParametersEventTypeNextTransitionStyleChanged):
                    if (NextTransitionStyleChanged != null)
                        NextTransitionStyleChanged(this, null);
                    break;

                case (_BMDSwitcherTransitionParametersEventType.bmdSwitcherTransitionParametersEventTypeTransitionSelectionChanged):
                    if (TransitionSelectionChanged != null)
                        TransitionSelectionChanged(this, null);
                    break;

                case (_BMDSwitcherTransitionParametersEventType.bmdSwitcherTransitionParametersEventTypeTransitionStyleChanged):
                    if (TransitionStyleChanged != null)
                        TransitionStyleChanged(this, null);
                    break;
            }
        }
    }

    class DownStreamKeyMonitor : IBMDSwitcherDownstreamKeyCallback
    {
        public event SwitcherEventHandler ClipChanged;
        public event SwitcherEventHandler FramesRemainingChanged;
        public event SwitcherEventHandler GainChanged;
        public event SwitcherEventHandler InputCutChanged;
        public event SwitcherEventHandler InputFillChanged;
        public event SwitcherEventHandler InverseChanged;
        public event SwitcherEventHandler IsAutoTransitioningChanged;
        public event SwitcherEventHandler IsTransitioningChanged;
        public event SwitcherEventHandler MaskBottomChanged;
        public event SwitcherEventHandler MaskedChanged;
        public event SwitcherEventHandler MaskLeftChanged;
        public event SwitcherEventHandler MaskRightChanged;
        public event SwitcherEventHandler MaskTopChanged;
        public event SwitcherEventHandler OnAirChanged;
        public event SwitcherEventHandler PreMultipliedChanged;
        public event SwitcherEventHandler RateChanged;
        public event SwitcherEventHandler TieChanged;

        public DownStreamKeyMonitor()
        {
        }

        void IBMDSwitcherDownstreamKeyCallback.Notify(_BMDSwitcherDownstreamKeyEventType EventType)
        {
            switch (EventType)
            {
                case (_BMDSwitcherDownstreamKeyEventType.bmdSwitcherDownstreamKeyEventTypeClipChanged):
                    if (ClipChanged != null)
                        ClipChanged(this, null);
                    break;

                case (_BMDSwitcherDownstreamKeyEventType.bmdSwitcherDownstreamKeyEventTypeFramesRemainingChanged):
                    if (FramesRemainingChanged != null)
                        FramesRemainingChanged(this, null);
                    break;

                case (_BMDSwitcherDownstreamKeyEventType.bmdSwitcherDownstreamKeyEventTypeGainChanged):
                    if (GainChanged != null)
                        GainChanged(this, null);
                    break;

                case (_BMDSwitcherDownstreamKeyEventType.bmdSwitcherDownstreamKeyEventTypeInputCutChanged):
                    if (InputCutChanged != null)
                        InputCutChanged(this, null);
                    break;

                case (_BMDSwitcherDownstreamKeyEventType.bmdSwitcherDownstreamKeyEventTypeInputFillChanged):
                    if (InputFillChanged != null)
                        InputFillChanged(this, null);
                    break;

                case (_BMDSwitcherDownstreamKeyEventType.bmdSwitcherDownstreamKeyEventTypeInverseChanged):
                    if (InverseChanged != null)
                        InverseChanged(this, null);
                    break;

                case (_BMDSwitcherDownstreamKeyEventType.bmdSwitcherDownstreamKeyEventTypeIsAutoTransitioningChanged):
                    if (IsAutoTransitioningChanged != null)
                        IsAutoTransitioningChanged(this, null);
                    break;

                case (_BMDSwitcherDownstreamKeyEventType.bmdSwitcherDownstreamKeyEventTypeIsTransitioningChanged):
                    if (IsTransitioningChanged != null)
                        IsTransitioningChanged(this, null);
                    break;

                case (_BMDSwitcherDownstreamKeyEventType.bmdSwitcherDownstreamKeyEventTypeMaskBottomChanged):
                    if (MaskBottomChanged != null)
                        MaskBottomChanged(this, null);
                    break;

                case (_BMDSwitcherDownstreamKeyEventType.bmdSwitcherDownstreamKeyEventTypeMaskedChanged):
                    if (MaskedChanged != null)
                        MaskedChanged(this, null);
                    break;

                case (_BMDSwitcherDownstreamKeyEventType.bmdSwitcherDownstreamKeyEventTypeMaskLeftChanged):
                    if (MaskLeftChanged != null)
                        MaskLeftChanged(this, null);
                    break;

                case (_BMDSwitcherDownstreamKeyEventType.bmdSwitcherDownstreamKeyEventTypeMaskRightChanged):
                    if (MaskRightChanged != null)
                        MaskRightChanged(this, null);
                    break;

                case (_BMDSwitcherDownstreamKeyEventType.bmdSwitcherDownstreamKeyEventTypeMaskTopChanged):
                    if (MaskTopChanged != null)
                        MaskTopChanged(this, null);
                    break;

                case (_BMDSwitcherDownstreamKeyEventType.bmdSwitcherDownstreamKeyEventTypeOnAirChanged):
                    if (OnAirChanged != null)
                        OnAirChanged(this, null);
                    break;

                case (_BMDSwitcherDownstreamKeyEventType.bmdSwitcherDownstreamKeyEventTypePreMultipliedChanged):
                    if (PreMultipliedChanged != null)
                        PreMultipliedChanged(this, null);
                    break;

                case (_BMDSwitcherDownstreamKeyEventType.bmdSwitcherDownstreamKeyEventTypeRateChanged):
                    if (RateChanged != null)
                        RateChanged(this, null);
                    break;

                case (_BMDSwitcherDownstreamKeyEventType.bmdSwitcherDownstreamKeyEventTypeTieChanged):
                    if (TieChanged != null)
                        TieChanged(this, null);
                    break;
            }
        }
    }

}
